namespace SourceCodeGenerator;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using SF = Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

public class CatQlSyntaxFactory
{
    public static SyntaxTriviaList LineFeedTrivia { get; } = SF.TriviaList(SF.CarriageReturnLineFeed);

    /// <summary>Returns the "is autogenerated" header.</summary>
    /// <param name="sourceType">The type the code is generated for.</param>
    /// <returns>A trivia list containing the header.</returns>
    public static SyntaxTriviaList GetHeader(Type sourceType)
        => SF.TriviaList(
            SF.Comment("//----------------------"),
            SF.CarriageReturnLineFeed,
            SF.Comment("// <auto-generated>"),
            SF.CarriageReturnLineFeed,
            SF.Comment("//      Generated by the SourceCodeGenerator project. DO NOT EDIT!"),
            SF.CarriageReturnLineFeed,
            SF.Comment($"//      Source: {sourceType.FullName ?? sourceType.Name}"),
            SF.CarriageReturnLineFeed,
            SF.Comment("// </auto-generated>"),
            SF.CarriageReturnLineFeed,
            SF.Comment("//----------------------"),
            SF.CarriageReturnLineFeed,
            SF.CarriageReturnLineFeed
        );

    /// <summary>Returns using directives generated from the provided strings.</summary>
    /// <param name="nameSpaces">The namespaces as string.</param>
    /// <returns>An array of using directives.</returns>
    public static UsingDirectiveSyntax[] CreateUsings(string[] nameSpaces)
        => nameSpaces.Select(o => SF.UsingDirective(SF.ParseName(o))).ToArray();

    /// <summary>Returns a base type with a generic type argument.</summary>
    /// <param name="type">The name of the base class type.</param>
    /// <param name="typeParameter">The name of the generic parameter type.</param>
    /// <returns>A generic base type.</returns>
    public static SimpleBaseTypeSyntax CreateGenericBaseType(string type, string typeParameter)
    {
        var baseClassTypeParameter = SF.TypeParameter(SF.Identifier(typeParameter));
        var baseClassTypeArguments = SF.TypeArgumentList(SF.SingletonSeparatedList<TypeSyntax>(SF.IdentifierName(baseClassTypeParameter.Identifier)));
        return SF.SimpleBaseType(
            SF.GenericName(SF.Identifier(type))
                .WithTypeArgumentList(baseClassTypeArguments));
    }
}