namespace SourceCodeGenerator.Generators
{
    using Interfaces;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Microsoft.CodeAnalysis.Formatting;

    internal class SchemaGenerator : ISourceCodeGenerator
    {
        public void Generate(Type sourceClassType)
        {
            var sourceClassName = sourceClassType.Name;
            var schemaName = sourceClassName + "Schema";

            var lineFeedTrivia = SyntaxFactory.TriviaList(SyntaxFactory.CarriageReturnLineFeed);

            // Create a new compilation
            var compilationUnit = SyntaxFactory.CompilationUnit();

            // Add auto generated header
            var leadingTrivia = SyntaxFactory.TriviaList(
                SyntaxFactory.Comment("//----------------------"),
                SyntaxFactory.CarriageReturnLineFeed,
                SyntaxFactory.Comment("// <auto-generated>"),
                SyntaxFactory.CarriageReturnLineFeed,
                SyntaxFactory.Comment("//      Generated by the SourceCodeGenerator project. DO NOT EDIT!"),
                SyntaxFactory.CarriageReturnLineFeed,
                SyntaxFactory.Comment($"//      source: {sourceClassType.FullName}"),
                SyntaxFactory.CarriageReturnLineFeed,
                SyntaxFactory.Comment("// </auto-generated>"),
                SyntaxFactory.CarriageReturnLineFeed,
                SyntaxFactory.Comment("//----------------------"),
                SyntaxFactory.CarriageReturnLineFeed,
                SyntaxFactory.CarriageReturnLineFeed
            );

            // Using directive
            var graphQlUsingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("global::GraphQL.Types"));
            var modelsUsingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Core.Models"));
            var mediatRUsingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("MediatR"));
            var queriesUsingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Queries"));

            // Namespace (with usings)
            var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName("CatQL.Presentation.GraphQL.Schema"))
                .AddUsings(graphQlUsingDirective, modelsUsingDirective, mediatRUsingDirective, queriesUsingDirective);

            // Add public class declaration
            var classDocumentation = SyntaxFactory.Comment($"/// <summary>GraphQL Schema for <see cref=\"{sourceClassName}\"/></summary>");
            var baseClass = SyntaxFactory.SingletonSeparatedList<BaseTypeSyntax>(SyntaxFactory.SimpleBaseType(SyntaxFactory.ParseTypeName("Schema")));
            var classDeclaration = SyntaxFactory.ClassDeclaration(schemaName)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                .WithBaseList(SyntaxFactory.BaseList(baseClass))
                .WithLeadingTrivia(SyntaxFactory.TriviaList(classDocumentation, SyntaxFactory.CarriageReturnLineFeed));

            // Create a constructor declaration
            var constructorDocumentation = SyntaxFactory.Comment($"/// <summary>Initializes a new instance of the <see cref=\"{schemaName}\"/> class.</summary>");
            var constructorParameterList = SyntaxFactory.ParameterList(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.Parameter(SyntaxFactory.Identifier("mediator"))
                        .WithType(SyntaxFactory.ParseTypeName("IMediator"))));
            var constructorDeclaration = SyntaxFactory.ConstructorDeclaration(schemaName)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                .WithBody(SyntaxFactory.Block())
                .WithLeadingTrivia(SyntaxFactory.TriviaList(constructorDocumentation, SyntaxFactory.CarriageReturnLineFeed))
                .WithParameterList(constructorParameterList);

            // Add statements to the constructor body
            var queryStatement = SyntaxFactory.ParseStatement($"Query = new {sourceClassName}Query(mediator);").WithTrailingTrivia(lineFeedTrivia);
            var mutatorStatement = SyntaxFactory.ParseStatement($"Mutation = new {sourceClassName}Mutation(mediator);");
            constructorDeclaration = constructorDeclaration.AddBodyStatements(queryStatement, mutatorStatement);

            // Add the constructor declaration to the class declaration
            classDeclaration = classDeclaration.AddMembers(constructorDeclaration);

            // Add class to namespace
            namespaceDeclaration = namespaceDeclaration.AddMembers(classDeclaration);

            // Add namespace to the compilation
            compilationUnit = compilationUnit.AddMembers(namespaceDeclaration)
                .WithLeadingTrivia(leadingTrivia);

            // Create syntax tree
            var syntaxTree2 = CSharpSyntaxTree.Create(compilationUnit);

            // Get the root of the syntax tree
            var root2 = syntaxTree2.GetRoot();

            // Format the syntax tree
            var formattedRoot = Formatter.Format(root2, new AdhocWorkspace());
            var fileContent2 = formattedRoot.ToFullString();

            // Write to file
            var filePath = $"../../../../Presentation/GraphQL/Schema/{schemaName}.cs";
            File.Create(filePath).Dispose();
            File.WriteAllText(filePath, fileContent2);
        }
    }
}