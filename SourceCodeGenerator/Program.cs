// See https://aka.ms/new-console-template for more information
using System.Diagnostics;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;

if (!Debugger.IsAttached) Debugger.Launch();

// Find all model .cs files
var modelFiles = Directory.GetFiles("../../../../Core/Models", "*.cs");

foreach (var modelFile in modelFiles)
{
    var fileContent = File.ReadAllText(modelFile);
    var syntaxTree = CSharpSyntaxTree.ParseText(fileContent);
    var root = syntaxTree.GetCompilationUnitRoot();
    var classes = root.DescendantNodes().OfType<ClassDeclarationSyntax>();

    foreach (var classDeclarationSyntax in classes)
    {
        // Check if Generator Attribute is present
        if (!classDeclarationSyntax.AttributeLists
                .Any(o => o.Attributes.Any(attribute => attribute.Name.ToString() == "GenerateSchema" || attribute.Name.ToString() == "GenerateSchemaAttribute")))
            continue;

        const string schemaName = "CatSchema2";
        var sourceClassName = classDeclarationSyntax.Identifier.Text;

        var lineFeedTrivia = SyntaxFactory.TriviaList(SyntaxFactory.CarriageReturnLineFeed);

        // Create a new compilation
        var compilationUnit = SyntaxFactory.CompilationUnit();

        // Add auto generated header
        var leadingTrivia = SyntaxFactory.TriviaList(
            SyntaxFactory.Comment("//----------------------"),
            SyntaxFactory.CarriageReturnLineFeed,
            SyntaxFactory.Comment("// <auto-generated>"),
            SyntaxFactory.CarriageReturnLineFeed,
            SyntaxFactory.Comment("//      Generated by the SourceCodeGenerator project. DO NOT EDIT!"),
            SyntaxFactory.CarriageReturnLineFeed,
            SyntaxFactory.Comment($"//      source: {classDeclarationSyntax.Identifier.Text}.cs"),
            SyntaxFactory.CarriageReturnLineFeed,
            SyntaxFactory.Comment("// </auto-generated>"),
            SyntaxFactory.CarriageReturnLineFeed,
            SyntaxFactory.Comment("//----------------------"),
            SyntaxFactory.CarriageReturnLineFeed,
            SyntaxFactory.CarriageReturnLineFeed
        );

        // Add the namespace
        var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName("CatQL.Presentation.GraphQL.Schema"));

        // Add using directive
        var usingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("global::GraphQL.Types"));
        namespaceDeclaration = namespaceDeclaration.AddUsings(usingDirective);
        usingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Core.Models"));
        namespaceDeclaration = namespaceDeclaration.AddUsings(usingDirective);
        usingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Queries"));
        namespaceDeclaration = namespaceDeclaration.AddUsings(usingDirective);

        // Add public class declaration
        var classDocumentation = SyntaxFactory.Comment($"/// <summary>GraphQL Schema for <see cref=\"{sourceClassName}\"/></summary>");
        var baseClass = SyntaxFactory.SingletonSeparatedList<BaseTypeSyntax>(SyntaxFactory.SimpleBaseType(SyntaxFactory.ParseTypeName("Schema")));
        var classDeclaration = SyntaxFactory.ClassDeclaration(schemaName)
            .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
            .WithBaseList(SyntaxFactory.BaseList(baseClass))
            .WithLeadingTrivia(SyntaxFactory.TriviaList(classDocumentation, SyntaxFactory.CarriageReturnLineFeed));

        // Create a constructor declaration
        var constructorDocumentation = SyntaxFactory.Comment($"/// <summary>Initializes a new instance of the <see cref=\"{schemaName}\"/> class.</summary>");
        var constructorDeclaration = SyntaxFactory.ConstructorDeclaration(schemaName)
            .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
            .WithBody(SyntaxFactory.Block())
            .WithLeadingTrivia(SyntaxFactory.TriviaList(constructorDocumentation, SyntaxFactory.CarriageReturnLineFeed));

        // Add statements to the constructor body
        var queryStatement = SyntaxFactory.ParseStatement($"Query = new {sourceClassName}Query(mediator);").WithTrailingTrivia(lineFeedTrivia);
        var mutatorStatement = SyntaxFactory.ParseStatement($"Mutation = new {sourceClassName}Mutation(mediator);");
        constructorDeclaration = constructorDeclaration.AddBodyStatements(queryStatement, mutatorStatement);

        // Add the constructor declaration to the class declaration
        classDeclaration = classDeclaration.AddMembers(constructorDeclaration);

        // Add class to namespace
        namespaceDeclaration = namespaceDeclaration.AddMembers(classDeclaration);

        // Add namespace to the compilation
        compilationUnit = compilationUnit.AddMembers(namespaceDeclaration);

        compilationUnit = compilationUnit.WithLeadingTrivia(leadingTrivia);


        // Create syntax tree
        var syntaxTree2 = CSharpSyntaxTree.Create(compilationUnit);

        // Get the root of the syntax tree
        var root2 = syntaxTree2.GetRoot();

        // Format the syntax tree
        var formattedRoot = Formatter.Format(root2, new AdhocWorkspace());
        var fileContent2 = formattedRoot.ToFullString();

        // Write to file
        var filePath = "../../../../Presentation/GraphQL/Schema/CatSchema2.cs";
        File.Create(filePath).Dispose();
        File.WriteAllText(filePath, fileContent2);
        Console.WriteLine($"Generating sources for model class {classDeclarationSyntax.Identifier.Text}");
    }
}

Console.WriteLine("Press RETURN to exit");
Console.ReadLine();